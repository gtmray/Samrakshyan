'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var isBrowser = typeof document !== 'undefined';
var shouldSerializeToReactTree = !isBrowser || process.env.NODE_ENV === 'test';
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className]);
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var insertStyles = function insertStyles(context, insertable) {
  if (insertable.type === 1 && context.registered["css-" + insertable.name] === undefined) {
    context.registered["css-" + insertable.name] = insertable.styles;
  }

  if (context.inserted[insertable.name] === undefined) {
    var rules = context.stylis(insertable.type === 1 ? ".css-" + insertable.name : '', insertable.styles);

    if (shouldSerializeToReactTree) {
      context.inserted[insertable.name] = rules.join('');
    } else {
      rules.forEach(function (rule) {
        context.sheet.insert(rule);
      });
      context.inserted[insertable.name] = true;
    }

    if (context.compat === undefined) {
      return context.inserted[insertable.name];
    }
  }
};

exports.isBrowser = isBrowser;
exports.shouldSerializeToReactTree = shouldSerializeToReactTree;
exports.getRegisteredStyles = getRegisteredStyles;
exports.insertStyles = insertStyles;
//# sourceMappingURL=index.cjs.js.map
