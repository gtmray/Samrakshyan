{"version":3,"file":"index.browser.es.js","sources":["../src/index.js"],"sourcesContent":["// @flow\nimport * as React from 'react'\nimport { withCSSContext } from '@emotion/core'\nimport type { InsertableStyles, CSSContextType } from '@emotion/types'\nimport { insertStyles, shouldSerializeToReactTree } from '@emotion/utils'\n\ntype Props = {\n  styles: InsertableStyles | Array<InsertableStyles>\n}\n\nconst Style = withCSSContext((props: Props, context: CSSContextType) => {\n  let rules = ''\n  let hash = ''\n  if (Array.isArray(props.styles)) {\n    props.styles.forEach(style => {\n      let renderedStyle = insertStyles(context, style)\n      if (renderedStyle !== undefined) {\n        // $FlowFixMe\n        rules += renderedStyle\n        hash += ` ${style.name}`\n      }\n    })\n  } else {\n    let renderedStyle = insertStyles(context, props.styles)\n    if (renderedStyle !== undefined) {\n      rules = renderedStyle\n      // $FlowFixMe\n      hash += ` ${props.styles.name}`\n    }\n  }\n  if (shouldSerializeToReactTree && rules !== '') {\n    return (\n      <style\n        {...{\n          [`data-emotion-${context.key}`]: hash.substring(1),\n          dangerouslySetInnerHTML: { __html: rules }\n        }}\n      />\n    )\n  }\n  return null\n})\n\nexport default Style\n"],"names":["Style","withCSSContext","props","context","rules","hash","Array","isArray","styles","forEach","renderedStyle","insertStyles","style","undefined","name"],"mappings":";;;;AAUA,IAAMA,QAAQC,eAAe,UAACC,KAAD,EAAeC,OAAf,EAA2C;MAClEC,QAAQ,EAAZ;MACIC,OAAO,EAAX;;MACIC,MAAMC,OAAN,CAAcL,MAAMM,MAApB,CAAJ,EAAiC;UACzBA,MAAN,CAAaC,OAAb,CAAqB,iBAAS;UACxBC,gBAAgBC,aAAaR,OAAb,EAAsBS,KAAtB,CAApB;;UACIF,kBAAkBG,SAAtB,EAAiC;;iBAEtBH,aAAT;sBACYE,MAAME,IAAlB;;KALJ;GADF,MASO;QACDJ,gBAAgBC,aAAaR,OAAb,EAAsBD,MAAMM,MAA5B,CAApB;;QACIE,kBAAkBG,SAAtB,EAAiC;cACvBH,aAAR,CAD+B;;oBAGnBR,MAAMM,MAAN,CAAaM,IAAzB;;;;;;SAaG,IAAP;CA9BY,CAAd;;;;"}