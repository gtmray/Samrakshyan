{"version":3,"file":"index.min.js","sources":["../../utils/src/index.js","../src/index.js"],"sourcesContent":["// @flow\nimport type { CSSCache, CSSContextType, InsertableStyles } from '@emotion/types'\n\nexport const isBrowser = typeof document !== 'undefined'\nexport const shouldSerializeToReactTree =\n  !isBrowser || process.env.NODE_ENV === 'test'\n\nexport function getRegisteredStyles(\n  registered: CSSCache,\n  registeredStyles: string[],\n  classNames: string\n) {\n  let rawClassName = ''\n\n  classNames.split(' ').forEach(className => {\n    if (registered[className] !== undefined) {\n      registeredStyles.push(registered[className])\n    } else {\n      rawClassName += `${className} `\n    }\n  })\n  return rawClassName\n}\n\nexport const insertStyles = (\n  context: CSSContextType,\n  insertable: InsertableStyles\n) => {\n  if (\n    insertable.type === 1 &&\n    context.registered[`css-${insertable.name}`] === undefined\n  ) {\n    context.registered[`css-${insertable.name}`] = insertable.styles\n  }\n  if (context.inserted[insertable.name] === undefined) {\n    let rules = context.stylis(\n      insertable.type === 1 ? `.css-${insertable.name}` : '',\n      insertable.styles\n    )\n\n    if (shouldSerializeToReactTree) {\n      context.inserted[insertable.name] = rules.join('')\n    } else {\n      rules.forEach(rule => {\n        context.sheet.insert(rule)\n      })\n      context.inserted[insertable.name] = true\n    }\n    if (context.compat === undefined) {\n      return context.inserted[insertable.name]\n    }\n  }\n}\n","// @flow\nimport * as React from 'react'\nimport { withCSSContext } from '@emotion/core'\nimport type { InsertableStyles, CSSContextType } from '@emotion/types'\nimport { insertStyles, shouldSerializeToReactTree } from '@emotion/utils'\n\ntype Props = {\n  styles: InsertableStyles | Array<InsertableStyles>\n}\n\nconst Style = withCSSContext((props: Props, context: CSSContextType) => {\n  let rules = ''\n  let hash = ''\n  if (Array.isArray(props.styles)) {\n    props.styles.forEach(style => {\n      let renderedStyle = insertStyles(context, style)\n      if (renderedStyle !== undefined) {\n        // $FlowFixMe\n        rules += renderedStyle\n        hash += ` ${style.name}`\n      }\n    })\n  } else {\n    let renderedStyle = insertStyles(context, props.styles)\n    if (renderedStyle !== undefined) {\n      rules = renderedStyle\n      // $FlowFixMe\n      hash += ` ${props.styles.name}`\n    }\n  }\n  if (shouldSerializeToReactTree && rules !== '') {\n    return (\n      <style\n        {...{\n          [`data-emotion-${context.key}`]: hash.substring(1),\n          dangerouslySetInnerHTML: { __html: rules }\n        }}\n      />\n    )\n  }\n  return null\n})\n\nexport default Style\n"],"names":["insertStyles","context","insertable","type","undefined","registered","name","styles","inserted","stylis","forEach","sheet","insert","rule","compat","withCSSContext","props","Array","isArray","renderedStyle","style"],"mappings":"mRAwBO,IAAMA,EAAe,SAC1BC,EACAC,OAGsB,IAApBA,EAAWC,WACsCC,IAAjDH,EAAQI,kBAAkBH,EAAWI,UAE7BD,kBAAkBH,EAAWI,MAAUJ,EAAWK,aAElBH,IAAtCH,EAAQO,SAASN,EAAWI,SAClBL,EAAQQ,OACE,IAApBP,EAAWC,aAAqBD,EAAWI,KAAS,GACpDJ,EAAWK,QAMLG,QAAQ,cACJC,MAAMC,OAAOC,OAEfL,SAASN,EAAWI,OAAQ,OAEfF,IAAnBH,EAAQa,eACHb,EAAQO,SAASN,EAAWI,cCvC3BS,iBAAe,SAACC,EAAcf,MAGtCgB,MAAMC,QAAQF,EAAMT,UAChBA,OAAOG,QAAQ,gBACfS,EAAgBnB,EAAaC,EAASmB,QACpBhB,IAAlBe,IAEOA,MACGC,EAAMd,YAGjB,KACDa,EAAgBnB,EAAaC,EAASe,EAAMT,aAC1BH,IAAlBe,IACMA,MAEIH,EAAMT,OAAOD,aAatB"}